function roleCheck (auth, role) {
    return root.child('roles').child(auth.uid).val() == role;
}

function isOwnAccess(auth, userKey) {
    return auth.uid == userKey;
}

function isAuthenticatedAccess (auth){
    return auth.uid !== null;
}

path /owners {
    read() { isAuthenticatedAccess(auth) }
}

path /owners/{ownerid} {
    write() { roleCheck(auth, "editor") || roleCheck(auth, "admin") }
}

path /users {
    read() { isAuthenticatedAccess(auth) }
}

path /users/{uid} is User{
    write() { isOwnAccess(auth, uid) || roleCheck(auth, "admin") }
}

path /roles/{uid} {
    read() { isAuthenticatedAccess(auth) }
    write() { roleCheck(auth, "admin") }
}
path /costCenters/{uid}{
    read() { isAuthenticatedAccess(auth) }
    write() { roleCheck(auth, "admin") || roleCheck(auth, "editor")}
}
path /costCenters {
    read() { isAuthenticatedAccess(auth) }
}
path /expenses {
    read() { isAuthenticatedAccess(auth) }
    index() {["costCenterId"]}
}
path /expenses/{uid} {
    read() { isAuthenticatedAccess(auth) }
    write() { roleCheck(auth, "admin") || roleCheck(auth, "editor")}
}

path /payments {
    read() { isAuthenticatedAccess(auth) }
    index() {["costCenterId"]}
}

path /payments/{uid} {
    read() { isAuthenticatedAccess(auth) }
    write() { roleCheck(auth, "admin") || roleCheck(auth, "editor")}
}

path /announcements {
    read() { isAuthenticatedAccess(auth) }
    index() {["costCenterId"]}
}

path /announcements/{uid} {
    read() { isAuthenticatedAccess(auth) }
    write() { roleCheck(auth, "admin") || roleCheck(auth, "editor")}
}

path /actions {
    read() { roleCheck(auth, "admin") || roleCheck(auth, "editor") }
}
path /actions/{uid} {`
    read() { roleCheck(auth, "admin") || roleCheck(auth, "editor") }
    write() { roleCheck(auth, "admin") || roleCheck(auth, "editor")}
}
type User {
  email: String,
  displayName: String,
}